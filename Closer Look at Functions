/////////////////////////////////////////////////
//Default Parameters:-
const bookings = [];

const createBooking = function (flightNum, numPassengers=1, price=199*numPassengers) {// ES6
  //Traditional method: ES5
//   numPassengers = numPassengers || 1;
//   price = price || 199;

  const booking = {
    flightNum,
    numPassengers,
    price,
  };
  console.log(booking);
  bookings.push(booking);
};

createBooking('LH123');
createBooking('LH123', 2, 800); 
createBooking('LH123', 1);
createBooking('LH123',5)
createBooking('LH123', undefined, 1000);
//////////////////////////////////////////////////

//////////////////////////////////////////////////
//How passing argument works Value vs Reference:-
const flight = 'LH234';
const jonas = {
  name: 'Jonas Schmedtmann',
  passport: 22357972032,
};

const checkIn = function (flightNum, passenger) {
  flightNum = 'LH999';
  passenger.name = 'Mr. ' + passenger.name;

  if (passenger.passport === 22357972032) {
    alert('Checked In');
  } else {
    alert('Wrong Password!');
  }
};

checkIn(flight, jonas);

console.log(flight); //nothing changed
console.log(jonas); //changed with extra Mr.
//so this flight here is a primitive type and as we passed
that value into the function down here, then the flight number
here is basically a copy of that original value so flight number
contains a copy and not simply orighinal value of the flight
variable. So this would be exactly the same as writing "const
flightNum= flight" and this would also then simply copy this value
to fligthNum and so flightNum here is completely different variable
and therefore as we changed it here it did not get reflected in
the outside flight variable and so it's still LH234. But now what about
the Jonas object that we passed into the checkIn function and in that
function it is called passenger and then we changed that passenger
object and the jonas object was also affected by that change so why
did that happen? So when we pass a reference type to a fucntion, what
is copied is really just a reference to the object in the memory heap
so that would be exacly like doing thing "const passenger= joans" so
when we try to copy object like this we are only copying the reference
to that object in the memory heap but they both point to the same object
in the memory. So here as we are manipulating the passenger object, it is
exactly the same as manipulating the jonas object because they both are
the same object in the memory heap.

//another example:
const newPassport = function (person) {
  person.passport = Math.trunc(Math.random() * 10000000000);
};

newPassport(jonas);
checkIn(flight,jonas);
//so here the exact same thing is happening in the new passport function
I'm passing in an object and so that object here is then called person and
as the function manipulates that person object of course it also gets reflected
in jonas object. And then as we pass that jonas object into the checking function
then of course that passport is no longer the same as the origninal one.

//Note: Javascript does not have pass by reference it's a little bit confusing
because as we just learned for objects we do in fact pass in reference so that
is memory address of the object, however that reference itself is still a value,
it's simply a value that contains a memroy address. So basically we pass a reference
to the function but we do not pass by reference and this is an important distincition.
/////////////////////////////////////////////////

////////////////////////////////////////////////
//Fucntions accepting callback functions:-
const oneWord = function (str) {
  return str.replace(/ /g, '').toLowerCase();
};

const upperFirstWord = function (str) {
  const [first, ...others] = str.split(' ');
  return [first.toUpperCase(), ...others].join(' ');
};

//Higher order function: takes-in the function:
const transformer = function (str, fn) {
  console.log(`Original String: ${str}`);
  console.log(`Transformed String: ${fn(str)}`);
  console.log(`Transformed by: ${fn.name}`);
};

transformer('JavsScript is the best!', upperFirstWord);

transformer('JavsScript is the best!', oneWord);
//transformer is higher order function and fn is callback function.

//Javascript uses call backs all the time:
//advantages: makes code more readable
//2. abstraction: the higher function doesn't care about how things are getting done, it just wanna get his function done.

const high5 = function () {
  console.log('ðŸ™Œ');
};

document.body.addEventListener('click', high5);

['Jonas', 'Martha', 'Adam'].forEach(high5);

//////////////////////////////////////////////
//Functions returning function:-
const greet = function (greeting) {
  return function (name) {
    console.log(`${greeting} ${name}`);
  };
};

const greeterHey = greet('Hey');
greeterHey('Jonas');
greeterHey('Steven');
//here greet('Hey') returning the function which is stored in greetHey and when we call greetHey it runs and prints Hey jonas or steven.

greet('hello')('jonas');
//here greet('hello') returning function and simultaneously we have provided other argument for return fucntion and so it is giving output of hello jonas.

//Arrow representation of above function:
const greetArr = greeting => name => console.log(`${greeting} ${name}`);

greetArr('hi')('jonas');
///////////////////////////////////////////////

///////////////////////////////////////////////
//The call and apply methods:-
const lufthansa = {
  airline: 'Lufthansa',
  iataCode: 'LH',
  bookings: [],

  book(flightNum, name) {
    console.log(
      `${name} booked a seat on ${this.airline} flight ${this.iataCode}${flightNum}`
    );
    this.bookings.push({ flight: `${this.iataCode}${flightNum}`, name });
  },
};

lufthansa.book(239, 'Jonas Schmedtmann');
lufthansa.book(635, 'John Smith');
console.log(lufthansa);

const eurowings = {
  airline: 'Eurowings',
  iataCode: 'EW',
  bookings: [],
};

const book = lufthansa.book;
//book(23, 'Sarah Williams');
//output: Error, it is because now book is a normal function outside of the object when you call it the this keyword will have the property of undefined.

//Call method:
//remember functions are also objects so they can have there own methods,
book.call(eurowings, 23, 'Sarah Williams');
console.log(eurowings);
//this time we did not call the book function ourselves instead we called the 'call' method and it's then this call method which will call the book function with the this keyword set to eurowings so whatever we pass as the first argument of the call method. And so this allows us to manually and explicitly set the this keyword of any function that we want to call. Then all the arguments after the first one are simply the arguments of original function.
console.log(eurowings.bookings);
//now on eurowings.bookings we have one booking

book.call(lufthansa, 239, 'Mary Cooper');
console.log(lufthansa);

console.log(lufthansa.bookings);
//now on lufthansa.bookings we have three bookings

//Another Object:
const swiss = {
  airline: 'Swiss Air Lines',
  iataCode: 'LX',
  bookings: [],
};

book.call(swiss,583,'John Wick');

//Apply method: 
//apply method does exactly the same thing like call method but the only difference is that apply does not recieve a list of arguments after the this keyword but instead it's gonna take an array of the arguments.

const flightData= [583,'George Cooper'];
book.apply(swiss, flightData);

//the apply method is not used that anymore in modern javascript because we can use the spread operator:
book.call(swiss, ...flightData);
/////////////////////////////////////////////////

/////////////////////////////////////////////////
//The bind method:-
const bookEw = book.bind(eurowings);
//we can use the bind method to create a new function with the this keyword also set to eurowings and bind
method will not call the book function instead it will return a new function where the this keyword will 
always be set to eurowings.
bookEw(23, 'Steven Williams');
//and as you can see this now looks like the normal book function call and that's because this function
here has already has the this keyword set in stone.

//for all airlines:
const bookLH = book.bind(lufthansa);
const bookLX = book.bind(swiss);

//we can take this bind function even further:
const bookEW23 = book.bind(eurowings, 23);
//here we set the flightNum argument in stone already for eurowings and we just have to pass the name as an
argument when we call this function like down here:
bookEW23('Jonas Schmedtmann');
bookEW23('Martha Cooper');

//Bind method with event listeners:
lufthansa.planes = 300;
lufthansa.buyplane = function () {
  console.log(this);

  this.planes++;
  console.log(this.planes);
  //this.planes is NaN and reason for that is that this keyword is the "Buy new plane" button element it is because
  that in an even handler function that this keyword always points to the elmement on which that handler is attached
  to.
};

//document.querySelector('.buy').addEventListener('click', lufthansa.buyplane);
//here lufthansa.buplane is an handler function and it is attached to "document.querySelector('.buy')" and
therfore inside of the handler function this keyword will point to the button element so that's why above
console.log(this); returns button.

//lufthansa.buyplane();
//this will work alright because it is outside of addEventListener.

//Solution:
document
  .querySelector('.buy')
  .addEventListener('click', lufthansa.buyplane.bind(lufthansa));
//here will not use the call method because it calls the function but bind makes a new function and this keyword
is set to lufthansa.

//Partial application:
//partial application means that we can preset parameters which means parameter will remain constant whenever we
use that funciton.

const addTax = (rate, value) => value + value * rate;
console.log(addTax(0.1, 200)); //general tax

const addVat = addTax.bind(null, 0.23); //in portugal tax is 23% so we can use the bind function to preset the tax percentage
//now it would look like addVat= value =>value + value*0.23;
//in this case we don't care about this keyword at all it's not even in the function ans so we just say null it
could be any other value because nothing will happen with it and it's kinda standard to use null and keep in mind
that the order of the arguments is important if you want to preset the rate then it has to be the first argument 
in above addVat function otherwise it wil not work.
//Now you could argue that what we just did here could easily have been done by default parameters but this is
actually different because bind method here is creating a brand new simply more specific function base on a more
general function which is the addTax function and the example here could be more complex too so this realy is 
different because using binds actually it really gives us a new function. So it's as we returned a new specific 
funtion from the addTax function.

console.log(addVat(100));
console.log(addVat(23));

//same example done by return function:
const addTaxRate = function (rate) {
  return function (value) {
    return value + value * 0.23; 
  };
};

const addVat2= addTaxRate(0.23);
console.log(addVat2(100));
console.log(addVat2(23));
/////////////////////////////////////////////////

//Closures:-
//It is the internal property of the function which helps to store all the parent variables for the local
function so that in future if local function needs those variables even after the end of execution context 
it can use.

const secureBooking = function(){
  let passengerCount=0;

  return function(){
    passengerCount++;
    console.log(`${passengerCount} passengers`);
  }
}

const booker= secureBooking();
//so the booker function using passengerCount variable even secureBooking execution context from stack has
been ended so here closure is working.

booker();
booker();
booker();

console.dir(booker); 
//this is showing property of closure in the console and note closure is interal property we cannot call those
varibales in our code whenever we want through its help.
