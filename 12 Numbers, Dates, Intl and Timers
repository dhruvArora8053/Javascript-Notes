/////////////////////////////////////////////////
// LECTURES
//Converting and Checking numbers:-
console.log(23 === 23.0);
//javascript has only one datatype for numbers and that is float

//error in javascript: we cannot to bank or scientific calculations in javascript
console.log(0.1 + 0.2);
console.log(0.1 + 0.2 === 0.3); //ouptupt: false

//Conversion: string to number:
console.log(Number('23')); //old
console.log(+'23'); //new it will do type coercion

//Parsing: string to number:
console.log(Number.parseInt('30px', 10)); //30
console.log(Number.parseInt('e23', 10)); //NaN
//it tries to get rid of unecessary symbols that are not numbers and here second parameter is a base

console.log(Number.parseInt('  2.5rem   ', 10));
console.log(Number.parseFloat('   2.5rem  ', 10));

//Checking if value is NaN
console.log(Number.isNaN(20)); //false
console.log(Number.isNaN('20')); //false
console.log(Number.isNaN(+'20X')); //true
console.log(Number.isNaN(23 / 0)); //false
//this method will not tell if it's infinity or not so the better method is to

//checking if value is number is:
console.log(Number.isFinite(20)); //true
console.log(Number.isFinite('20')); //false
console.log(Number.isFinite(+'20X')); //false
console.log(Number.isFinite(23 / 0)); //false

//ifInt
console.log(Number.isInteger(23)); //true
console.log(Number.isInteger(23.0)); //true
console.log(Number.isInteger(23/0)); //false
////////////////////////////////////////////////
////////////////////////////////////////////////
//Math and Rounding:-
/*
//sqrt
console.log(Math.sqrt(25)); //5

//exponentiation operator
console.log(25 ** (1 / 2)); //5
console.log(8 ** (1 / 3)); //2

//max
console.log(Math.max(5, 18, 23, 11, 2)); //23
console.log(Math.max(5, 18, '23', 11, 2)); //23 it does type coercion
console.log(Math.max(5, 18, '23px', 11, 2)); //NaN however it does not do parsing

//min
console.log(Math.min(5, 18, 23, 11, 2)); //2

//PI
console.log(Math.PI);
//are of circle
console.log(Math.PI * Number.parseFloat('10px') ** 2);

//random
console.log(Math.trunc(Math.random() * 6) + 1);

//random integer between two values
const randomInt = (min, max) =>
  Math.floor(Math.random() * (max - min) + 1 + min);
//1. 0-->max-min+1 => 1-->max-min
//2. 1-->max-min+min => min-->max-min
console.log(randomInt(10, 20));


//Rounding Integers:
console.log(Math.trunc(23.3)); //23

console.log(Math.round(23.9)); //24
console.log(Math.round(23.3)); //23
//it rounds to nearest integer

console.log(Math.ceil(23.9)); //24
console.log(Math.ceil(23.3)); //24
//it rounds up, it does type coercion 

console.log(Math.floor(23.9)); //23 
console.log(Math.floor('23.3')); //23
//it rounds down, it does type coercion

//trunc vs floor
console.log(Math.trunc(-23.3)); //-23
console.log(Math.floor(-23.3)); //-24
   
//Rounding decimals: returns string 
console.log((2.7).toFixed(0)); //3
console.log((2.7).toFixed(3)); //2.700
console.log((2.345).toFixed(2)); //2.35
console.log(+(2.345).toFixed(2)); //2.35(number)
*/
/////////////////////////////////////////////////
////////////////////////////////////////////////
//The remainder operator:-
console.log(5 % 2); //1
console.log(5 / 2); //2.5

console.log(8 % 3); //2
console.log(8 / 3); //2.6

//checking even:
console.log(6 % 2); //0
console.log(6 / 2); //2

//checking odd:
console.log(7 % 2);
console.log(7 / 2);

const isEven = n => n % 2 === 0;
console.log(isEven(8));
console.log(isEven(23));
console.log(isEven(514));

labelBalance.addEventListener('click', function () {
  [...document.querySelectorAll('.movements__row')].forEach(function (row, i) {
    if (i % 2 === 0) row.style.backgroundColor = 'orangered';
    if (i % 3 === 0) row.style.backgroundColor = 'blue';
  });
});
//////////////////////////////////////////////////
//////////////////////////////////////////////////
//Numeric Seprators:-
const diameter = 287_460_000_000;
console.log(diameter); //287460000000

const price = 345_99;
console.log(price); //34599

const transferFee1 = 15_00;
const transferFee2 = 1_500;

const PI = 3.14_15;
console.log(PI);

console.log(Number('230_000')); //NaN
console.log(parseInt('230_000')); //230
//////////////////////////////////////////////////
//////////////////////////////////////////////////
//Working with BigInt:-
//Total number bits=64
//number represent bits= 53
//rest for= decimal and operator
console.log(2 ** 53 - 1); //9007199254740991
console.log(Number.MAX_SAFE_INTEGER); //9007199254740991
//biggest number that can represent by javascript safely any number bigger than this cannot represent by javascript safely

//not correct:
console.log(2 ** 53 + 1); //9007199254740992
console.log(2 ** 53 + 0); //9007199254740992

//from 2020 now we can store no matter how a big number is because of BigInt
console.log(4357962080794597523907894523n);
console.log(BigInt(43579620807));

//Operations
console.log(10000n + 10000n);
console.log(805549723643865979759794579854795817n * 453686846538n);

const huge = 5348683546865926896453894635879n;
const num = 23;
console.log(huge * BigInt(num)); //need to conver num first to bigInt then operations can be applicable

//Exceptions:
console.log(20n > 15); //true
console.log(20n === 20); //false
console.log(typeof 20n); //bigint
console.log(20n == 20); //true because of tyep coercion

console.log(huge + ' is REALLY big!!!');

//math function are not appplicable on bigInt:
//console.log(Math.sqrt(16n)); //error

//Divisions:
console.log(10n / 3n); //3n it returns closest bitint, it cuts off the decimal part
console.log(10/3); //3.3333333333333335

console.log(11n/3n); //3n
console.log(12n/3n); //4n
//////////////////////////////////////////////////

//////////////////////////////////////////////////
//Creating Dates:-
/*
const now = new Date();
console.log(now);

console.log(new Date('Jan 31 2023 21:26:35'));
console.log(new Date('December 24, 2015'));
console.log(new Date(account1.movementsDates[0]));

console.log(new Date(2037, 10, 19, 15, 23, 5)); //montha are zero based that's why 10
console.log(new Date(2036, 10, 33)); //autocorrects the date nov has only 30 days

//unix time
console.log(new Date(0));
//unix time 3 days later
console.log(new Date(3 * 24 * 60 * 60 * 1000));
*/

const future = new Date(2037, 10, 19, 15, 23); 
//date method is also a objecst so future is object and it has it's own method that we can apply
console.log(future);
console.log(future.getFullYear()); //2037
console.log(future.getMonth()); //10 zero based
console.log(future.getDate()); //19
console.log(future.getDay()); //4 day of the week
console.log(future.getHours()); //15
console.log(future.getMinutes()); //23
console.log(future.getSeconds()); //0
console.log(future.toISOString());
console.log(future.getTime()); //2142237180000 total milliseconds that have passed since 1-jan-1970
console.log(new Date(2142237180000)); //Thu Nov 19 2037 15:23:00 GMT+0530 (India Standard Time)

console.log(Date.now()); //1675182943486 milli-seconds till now

future.setFullYear(2040);
console.log(future);
//////////////////////////////////////////////////
