////////////////////////////////////////////////
//Regular functions Vs Arrow functions:-
const jonas = {
  firstName: 'Jonas',
  year: 1991,
  calcAge: function () {
    console.log(this);
    console.log(2037 - this.year);
  },

  greet: () => {
    console.log(this);
    console.log(`Hey ${this.firstName}`);
  },
};

jonas.greet();
//arrow functions does not get it's own keyword so it will simply use the this keyword from its surroundings
so in other words it's parent this keyword and the parent scope of this greet method is global scope. And
you can also might thing that object makes it's own block but that is not true it's just how we define the 
object.

console.log(this.firstName);
//on the window object there is not any property of firstName that is why it's outut is undefined.

var firstName = 'Matilda';
jonas.greet();
//Output: Matilda, this is because var created Matilda property on window object.

//another pitfall of this keyword:
/*
const jonas1 = {
  firstName: 'Jonas',
  year: 1991,
  calcAge: function () {
    console.log(this);
    console.log(2037 - this.year);

    const isMillenial = function () {
      console.log(this);
      console.log(this.year >= 1981 && this.year <= 1996);
    };
    isMillenial();
  },

  greet: () => {
    //console.log(this);
    console.log(`Hey ${this.firstName}`);

    
  },
};

jonas1.calcAge(); 
//output: Error, isMillenial(); is just a regular function call even thought it happens inside of a
method and the rule says that inside a regular funciton call which isMillenial(); clearly is that this
keyword must be undefined. So this is just as if this function was outside of calcAge() method. So the
rule is that a regular function call has the this keyword set to undefined.
*/

//Solution to problem:
const jonas2 = {
  firstName: 'Jonas',
  year: 1991,
  calcAge: function () {
    console.log(this);
    console.log(2037 - this.year);

    //Solution one:
    /*
    const self= this // preserving parent scope this
    const isMillenial = function () {
      console.log(self);
      console.log(self.year >= 1981 && self.year <= 1996);
    };
    isMillenial();
    */

    //Solution two:
    const isMillenial = () => {
      console.log(this);
      //because of arrow function now it will use the parent scope this keyword whic jonas object.
      console.log(this.year >= 1981 && this.year <= 1996);
    };
    isMillenial();
  },

  greet: () => {
    //console.log(this);
    console.log(`Hey ${this.firstName}`);
  },
};

jonas2.calcAge();

//self keyword:
console.log(self === this);

//arguments keyword:
const addExpr = function (a, b) {
  console.log(arguments);
  //this can be useful when we need a function to accept more parameters than we actually specified. 

  return a + b;
};

addExpr(2, 3);
addExpr(2,3,5,8); //it would be completely legal to add more arguments than a number of parameters. 


var addArrow=(a,b)=>{
  console.log(arguments); //output: Error, arrow functions does not get arguments keyword it only exist in regular functions.
  return a+b;
}

addArrow(2,5,8);
////////////////////////////////////////////////
